generator client {
  provider      = "prisma-client-js"
  output        = "../app/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  name          String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  emailVerified DateTime?
  image         String?
  phone         String?
  accounts      Account[]
  Authenticator Authenticator[]
  bookings      Booking[]
  Rating        Rating[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Barbershop {
  id                String              @id @default(uuid())
  name              String
  address           String
  phones            String[]
  description       String
  imageUrl          String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  bannerUrl         String?
  city              String?
  cnae              String?
  code              String?
  complement        String?
  corporateName     String?
  cpfCnpj           String?
  gestorid          String
  latitude          Float?
  longitude         Float?
  neighborhood      String?
  number            String?
  state             String?
  stateRegistration String?
  theme             ThemeType?
  zipCode           String?
  verification      BarbershopVerification?
  gestor            Gestor              @relation(fields: [gestorid], references: [id])
  services          BarbershopService[]
  ratings           Rating[]
  transactions      Transaction[]
  workers           Worker[]
  revenues          PlatformRevenue[]
  activities        CustomerActivity[]
}

model BarbershopService {
  id           String     @id @default(uuid())
  name         String
  description  String
  imageUrl     String
  price        Decimal    @db.Decimal(10, 2)
  barbershopId String
  active       Boolean    @default(true)
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])
  bookings     Booking[]
}

model Booking {
  id          String            @id @default(uuid())
  userId      String?
  serviceId   String
  date        DateTime
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  clientName  String?
  clientPhone String?
  workerId    String
  service     BarbershopService @relation(fields: [serviceId], references: [id])
  user        User?             @relation(fields: [userId], references: [id])
  worker      Worker            @relation(fields: [workerId], references: [id])
  rating      Rating?
}

model Worker {
  id           String     @id @default(uuid())
  name         String
  email        String?
  phone        String?
  imageUrl     String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  barbershopId String
  active       Boolean    @default(true)
  bookings     Booking[]
  hors         Hors?
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])
}

model Hors {
  workerId  String   @id @unique
  horarios  String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  worker    Worker   @relation(fields: [workerId], references: [id], onDelete: Cascade)
}

model Rating {
  id           String     @id @default(uuid())
  barbershopId String
  userId       String?
  bookingId    String     @unique
  rate         Int
  barbershop   Barbershop @relation(fields: [barbershopId], references: [id])
  booking      Booking    @relation(fields: [bookingId], references: [id])
  user         User?      @relation(fields: [userId], references: [id])
}

model Gestor {
  id                    String              @id @default(uuid())
  name                  String?
  email                 String              @unique
  password              String
  image                 String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  type                  GestorType
  plan                  PlanType?
  planStartDate         DateTime?
  planEndDate           DateTime?
  subscriptionStatus    SubscriptionStatus? @default(INACTIVE)
  mercadoPagoCustomerId String?
  lastPaymentId         String?
  barbershopid          Barbershop[]
}

model Transaction {
  id            String                   @id @default(uuid())
  name          String
  type          TransactionType
  amount        Decimal                  @db.Decimal(10, 2)
  category      TransactionCategory
  paymentMethod TransactionPaymentMethod
  date          DateTime
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  barbershopId  String
  barbershop    Barbershop               @relation(fields: [barbershopId], references: [id])
}

model Admin {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  type      AdminType
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relacionamentos
  expenses  PlatformExpense[]
}

enum ThemeType {
  red
  redDark
  rose
  roseDark
  orange
  orangeDark
  green
  greenDark
  blue
  blueDark
  yellow
  yellowDark
  violet
  violetDark
}

enum GestorType {
  ADMIN
  OWNER
  WORKER
}

enum PlanType {
  BASIC
  PRO
  PREMIUM
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  EXPIRED
  PENDING
  CANCELLED
}

enum TransactionType {
  DEPOSIT
  EXPENSE
  INVESTMENT
}

enum TransactionCategory {
  SALARY
  FOOD
  TRANSPORT
  HOUSING
  UTILITIES
  OTHER
  BARBERSHOP
}

enum TransactionPaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  PIX
  CASH
  OTHER
}

enum AdminType {
  SUPORTE
  ADMIN
}

// ==================== PLATFORM FINANCIAL CONTROL ====================
model PlatformExpense {
  id          String            @id @default(uuid())
  name        String            // Nome da despesa
  description String?           // Descrição opcional
  amount      Decimal           @db.Decimal(10, 2) // Valor da despesa
  category    ExpenseCategory   // Categoria da despesa
  date        DateTime          // Data da despesa
  receipt     String?           // URL do comprovante (opcional)
  isRecurring Boolean           @default(false) // Se é uma despesa recorrente
  recurringType RecurringType?  // Tipo de recorrência (se aplicável)
  createdBy   String            // ID do admin que criou
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  // Relacionamentos
  admin       Admin             @relation(fields: [createdBy], references: [id])
}

model PlatformRevenue {
  id          String            @id @default(uuid())
  source      RevenueSource     // Fonte da receita
  amount      Decimal           @db.Decimal(10, 2) // Valor da receita
  description String?           // Descrição opcional
  date        DateTime          // Data da receita
  barbershopId String?          // ID da barbearia (se aplicável)
  subscriptionId String?        // ID da assinatura (se aplicável)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  // Relacionamentos
  barbershop  Barbershop?       @relation(fields: [barbershopId], references: [id])
}

model CustomerActivity {
  id          String            @id @default(uuid())
  barbershopId String           // ID da barbearia
  activity    CustomerActivityType // Tipo de atividade
  amount      Decimal?          @db.Decimal(10, 2) // Valor (se aplicável)
  description String?           // Descrição da atividade
  date        DateTime          // Data da atividade
  createdAt   DateTime          @default(now())
  
  // Relacionamentos
  barbershop  Barbershop        @relation(fields: [barbershopId], references: [id])
}

enum ExpenseCategory {
  SERVER      // Servidor/hosting
  MARKETING   // Marketing e publicidade
  DEVELOPMENT // Desenvolvimento
  SUPPORT     // Suporte técnico
  OFFICE      // Escritório
  LEGAL       // Jurídico
  OTHER       // Outros
}

enum RecurringType {
  MONTHLY     // Mensal
  QUARTERLY   // Trimestral
  YEARLY      // Anual
}

enum RevenueSource {
  SUBSCRIPTION    // Assinatura mensal
  COMMISSION      // Comissão por transação
  SETUP_FEE       // Taxa de setup
  PREMIUM_FEATURE // Recursos premium
  OTHER           // Outros
}

enum CustomerActivityType {
  NEW_SUBSCRIPTION    // Nova assinatura
  RENEWAL            // Renovação
  CANCELLATION       // Cancelamento
  UPGRADE            // Upgrade de plano
  DOWNGRADE          // Downgrade de plano
  PAYMENT_SUCCESS    // Pagamento realizado
  PAYMENT_FAILED     // Falha no pagamento
}

enum BarbershopVerification {
  PIONEER    // Pioneiro - Badge dourado
  VERIFIED   // Verificado - Badge azul
}
